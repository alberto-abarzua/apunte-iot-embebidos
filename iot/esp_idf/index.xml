<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ESP-IDF on</title><link>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/</link><description>Recent content in ESP-IDF on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 11 Aug 2023 00:48:07 +0000</lastBuildDate><atom:link href="https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello World!</title><link>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/correr_ejemplo/</link><pubDate>Thu, 10 Aug 2023 15:09:25 +0000</pubDate><guid>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/correr_ejemplo/</guid><description>Primer proyecto # Una vez que hayan instalado el ESP-IDF, estaremos listos para comenzar con nuestro primer proyecto. Usaremos el ejemplo Hello_World disponible en el repositorio.
1. Copiar el ejemplo a un directorio de trabajo # La carpeta a copiar se descargó durante la instalación. Pueden encontrarla en el directorio donde se almacenó el repositorio. Por ejemplo:
En Windows: C:\Users\MiUsuario\Espressif\releases En Linux: ~/esp/esp-idf La ruta exacta será examples/get-started.
2. Conectar la ESP32 # Conecten el dispositivo a su computador usando un puerto USB.</description></item><item><title>Primer Programa</title><link>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/primer_programa/</link><pubDate>Thu, 10 Aug 2023 20:21:31 +0000</pubDate><guid>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/primer_programa/</guid><description>Estructura de un proyecto ESP-IDF # Un proyecto ESP-IDF típicamente tiene una estructura de directorio como esta:
mi_proyecto/ |-- build/ |-- components/ |-- main/ | |-- main.c |-- CMakeLists.txt |-- sdkconfig |-- ... Se puede crear un nuevo proyecto usando idf.py
idf.py create-project mi_proyecto build/: Este directorio contiene los archivos generados durante la compilación. components/: Aquí puedes colocar componentes adicionales o bibliotecas que tu proyecto pueda necesitar. main/: Es donde reside el código principal del programa, incluido main.</description></item><item><title>Prints y Logeo</title><link>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/logeo/</link><pubDate>Fri, 11 Aug 2023 00:52:34 +0000</pubDate><guid>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/logeo/</guid><description>Ya que el codigo se ejecuta en un microcontrolador, no podemos usar un debugger como lo hacemos en un computador. Por lo tanto, debemos usar otras técnicas para depurar y monitorear nuestro código. En este tutorial, veremos como imprimir mensajes en la consola y como usar el sistema de logeo de ESP-IDF, el cual sera la forma principal de depurar y monitorear nuestro código.
Prints Básicos: # Simplemente usa la función printf() como lo harías en cualquier programa de C.</description></item><item><title>Como dividir el codigo en componentes</title><link>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/componentes/</link><pubDate>Fri, 11 Aug 2023 00:50:51 +0000</pubDate><guid>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/componentes/</guid><description>Un componente en ESP-IDF es esencialmente una biblioteca o módulo que puedes incluir en tu proyecto. Puede ser una biblioteca que hayas escrito tú mismo, una biblioteca de terceros, o incluso una que ya exista dentro de ESP-IDF pero que requiera una configuración específica.
Paso 1: Crear o identificar el componente # Antes de agregar un componente, necesitas tener el componente en sí. Esto puede ser un conjunto de archivos .</description></item><item><title>Memoria no volátil</title><link>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/memoria_no_volatil/</link><pubDate>Fri, 11 Aug 2023 00:52:10 +0000</pubDate><guid>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/memoria_no_volatil/</guid><description>Coming soon&amp;hellip;</description></item><item><title>Delays, Deep Sleep y Reinicio</title><link>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/deep_sleep/</link><pubDate>Fri, 11 Aug 2023 00:52:22 +0000</pubDate><guid>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/deep_sleep/</guid><description>Coming soon&amp;hellip;</description></item><item><title>Funciones útiles</title><link>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/funciones_utiles/</link><pubDate>Fri, 11 Aug 2023 01:00:45 +0000</pubDate><guid>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/funciones_utiles/</guid><description>Coming soon&amp;hellip;</description></item><item><title>Como buscar ejemplos en ESP-IDF</title><link>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/como_buscar_ejemplos/</link><pubDate>Fri, 11 Aug 2023 01:37:30 +0000</pubDate><guid>https://alberto-abarzua.github.io/apunte-iot-embedidos/iot/esp_idf/como_buscar_ejemplos/</guid><description>Coming soon&amp;hellip;</description></item></channel></rss>